<?php
error_reporting(E_ALL^E_NOTICE);
use PHPUnit\Framework\TestCase;
use Slim\Http\Environment;
use Slim\Http\Request;
use Slim\Http\Response;
use utility\Session;

require_once "v1/controller/SQLpost.php";
require_once "v1/controller/SQLuser.php";
require_once "v1/library/Session.php";
require_once "v1/model/User.php";
require_once "v1/model/Guestbook.php";

class SQLPostTest extends TestCase
{
    protected $sql_post, $session, $user, $app, $sql_user, $guestbook;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->session = new Session();
        $this->user = new User();
        $this->guestbook = new Guestbook();
        $this->sql_post = new SQLpost($this->session, $this->user, $this->guestbook);
        $this->sql_user = new SQLuser($this->session, $this->user);
    }

    /*public function CanBeCreatedFrom_GetConn() {
        $this->assertNotEmpty(
            user::class. ':getConn'
        );
    }

    public function testLoginSuccessful(){
        $env = Environment::mock([
            'REQUEST_METHOD' => 'POST',
            'REQUEST_URI'    => '/v1/users/login',
        ]);
        $request = \Slim\Http\Request::createFromEnvironment($env);
        $response = new \Slim\Http\Response();
        $login = $this->user->loginUser($request, $response);
        $this->assertSame((string)$login->getStatusCode(), 200);
    }*/

    /*public function UserLoginIsSuccessful(){
        $requestData = ['email'=> 'm@yahoo.com', 'password'=>'123'];
        $env = Environment::mock([
            'REQUEST_METHOD' => 'POST',
            'REQUEST_URI'    => '/v1/users/login',
        ]);
        $request = \Slim\Http\Request::createFromEnvironment($env);
        $request->getBody()->write(json_encode($requestData));
        $response = new \Slim\Http\Response;
        $response = $this->sql_user->loginUser($request, $response);
        $this->assertSame(200, $response->getStatusCode());
        //$this->assertSame($this->controller->loginUser($request, $response)->getStatusCode, 200);
    }

    public function testLoginIsSuccessful(){
        $requestData = ['email'=> 'm@yahoo.com', 'password'=>'123'];
        $request  = $this->getRequest("post", "/v1/users/login", $requestData);
        $response = $this->sendHttpRequest($request, $this->app);
        $this->assertEquals(200, $response->getStatusCode());       returns 404 not found
    }

    public function LoginIsNotSuccessful_WrongPassword(){
        $requestData = ['email'=> 'm@yahoo.com', 'password'=>'1243'];
        $env = Environment::mock([
            'REQUEST_METHOD' => 'POST',
            'REQUEST_URI'    => '/v1/users/login',
            //'QUERY_STRING' => 'email=m@yahoo.com&password=1234'
        ]);
        $request = \Slim\Http\Request::createFromEnvironment($env);
        $request->getBody()->write(json_encode($requestData));
        $response = $this->sendHttpRequest($request, $this->app);
        $response = $this->sql_user->loginUser($request, $response);
        $this->assertSame(500, $response->getStatusCode());
    }*/

    private function requestHTTP($method, $url, $request_data)
    {
        $request = Request::createFromEnvironment(Environment::mock([
            'REQUEST_METHOD' => strtoupper($method),
            'REQUEST_URI' => $url,
        ]));
        if ($method == 'POST' or $method == 'PUT') {
            $request->getBody()->write(json_encode($request_data));
            return $request;
        } elseif ($method == 'DELETE' or $method = 'GET') {
            return $request;
        }
    }

    private function responseHTTP(){
        return $response = new Response();
    }
    /**
     * @backupGlobals disabled
     * @runInSeparateProcess
     */
    public function testGetPostsIsSuccessful(){
        $request = $this->requestHTTP('GET', '/v1/posts', $request_data = null);
        $response = $this->responseHTTP();
        $result = $this->sql_post->getPosts($request, $response);
        $this->assertSame($result->getStatusCode(), 200);
    }

    /**
     * @backupGlobals disabled
     * @runInSeparateProcess
     * supposed to fail
     */
    public function GetPostsIsNotSuccessful_NoPost(){
        $request = $this->requestHTTP('GET', '/v1/posts', $request_data = null);
        $response = $this->responseHTTP();
        $result = $this->sql_post->getPosts($request, $response);
        $this->assertSame($result->getStatusCode(), 400);
    }

    /**
     * @backupGlobals disabled
     * @runInSeparateProcess
     */
    public function CreatePostIsSuccessful(){
        $request_data = array(
            "email" => "m@yahoo.com",
            "password" => "123"
        );
        $request = $this->requestHTTP('POST', '/v1/user/login', $request_data);
        $response = $this->responseHTTP();
        $this->sql_user->loginUser($request, $response);
        $request_data = array(
            "post_entry" => "create post is successful via phpunit"
        );
        $request = $this->requestHTTP('POST', '/v1/posts/create', $request_data);
        $response = $this->responseHTTP();
        $result = $this->sql_post->createPost($request, $response);
        $this->assertEquals(201, $result->getStatusCode());
    }

    /**
     * @backupGlobals disabled
     * @runInSeparateProcess
     * supposed to fail
     */
    public function CreatePostIsNotSuccessful_Error(){
        $request_data = array(
            "post_entry" => "create post is successful via phpunit"
        );
        $request = $this->requestHTTP('POST', '/v1/posts/create', $request_data);
        $response = $this->responseHTTP();
        $result = $this->sql_post->createPost($request, $response);
        $this->assertEquals(400, $result->getStatusCode());
    }

    /**
     * @backupGlobals disabled
     * @runInSeparateProcess
     */
    public function testCreatePostIsNotSuccessful_PleaseLogIn(){
        $request_data = array(
            "post_entry" => "create post is not successful via phpunit - login pls"
        );
        $request = $this->requestHTTP('POST', '/v1/posts/create', $request_data);
        $response = $this->responseHTTP();
        $result = $this->sql_post->createPost($request, $response);
        $this->assertEquals(403, $result->getStatusCode());
    }

    /**
     * @backupGlobals disabled
     * @runInSeparateProcess
     */
    public function DeletePostIsSuccessful(){
        $request_data = array(
            "email" => "m@yahoo.com",
            "password" => "123"
        );
        $request = $this->requestHTTP('POST', '/v1/user/login', $request_data);
        $response = $this->responseHTTP();
        $this->sql_user->loginUser($request, $response);
        $request = $this->requestHTTP('DELETE', '/v1/posts/delete/{id}', $request_data = null);
        $request = $request->withAttribute('id', 368);
        $response = $this->responseHTTP();
        $result = $this->sql_post->deletePost($request, $response);
        $this->assertEquals(200, $result->getStatusCode());
    }

    /**
     * @backupGlobals disabled
     * @runInSeparateProcess
     */
    public function testDeletePostIsNotSuccessful_NotFound(){
        $request_data = array(
            "email" => "m@yahoo.com",
            "password" => "123"
        );
        $request = $this->requestHTTP('POST', '/v1/user/login', $request_data);
        $response = $this->responseHTTP();
        $this->sql_user->loginUser($request, $response);
        $request = $this->requestHTTP('DELETE', '/v1/posts/delete/{id}', $request_data = null);
        $request = $request->withAttribute('id', 362);
        $response = $this->responseHTTP();
        $result = $this->sql_post->deletePost($request, $response);
        $this->assertEquals(404, $result->getStatusCode());
    }

    /**
     * @backupGlobals disabled
     * @runInSeparateProcess
     */
    public function testDeletePostIsNotSuccessful_PleaseLogIn(){
        $request = $this->requestHTTP('DELETE', '/v1/posts/delete/{id}', $request_data = null);
        $request = $request->withAttribute('id', 360);
        $response = $this->responseHTTP();
        $result = $this->sql_post->deletePost($request, $response);
        $this->assertEquals(403, $result->getStatusCode());
    }

    /**
     * @backupGlobals disabled
     * @runInSeparateProcess
     * supposed to fail
     */
    public function DeletePostIsNotSuccessful_Error(){
        $request = $this->requestHTTP('DELETE', '/v1/posts/delete/{id}', $request_data = null);
        $request = $request->withAttribute('id', 360);
        $response = $this->responseHTTP();
        $result = $this->sql_post->deletePost($request, $response);
        $this->assertEquals(400, $result->getStatusCode());
    }

    /**
     * @backupGlobals disabled
     * @runInSeparateProcess
     */
    public function testEditPostIsSuccessful(){
        $request_data = array(
            "email" => "m@yahoo.com",
            "password" => "123"
        );
        $request = $this->requestHTTP('POST', '/v1/user/login', $request_data);
        $response = $this->responseHTTP();
        $this->sql_user->loginUser($request, $response);
        $request_data = array(
            'post_entry' => 'test edit using phpunit'
        );
        $request = $this->requestHTTP('PUT', '/v1/posts/edit/{id}', $request_data);
        $request = $request->withAttribute('id', 370);
        $response = $this->responseHTTP();
        $result = $this->sql_post->editPost($request, $response);
        $this->assertEquals(200, $result->getStatusCode());
    }

    /**
     * @backupGlobals disabled
     * @runInSeparateProcess
     */
    public function testEditPostIsNotSuccessful_NotFound(){
        $request_data = array(
            "email" => "m@yahoo.com",
            "password" => "123"
        );
        $request = $this->requestHTTP('POST', '/v1/user/login', $request_data);
        $response = $this->responseHTTP();
        $this->sql_user->loginUser($request, $response);
        $request_data = array(
            'post_entry' => 'test edit using phpunit'
        );
        $request = $this->requestHTTP('PUT', '/v1/posts/edit/{id}', $request_data);
        $request = $request->withAttribute('id', 362);
        $response = $this->responseHTTP();
        $result = $this->sql_post->editPost($request, $response);
        $this->assertEquals(404, $result->getStatusCode());
    }

    /**
     * @backupGlobals disabled
     * @runInSeparateProcess
     */
    public function testEditPostIsNotSuccessful_PleaseLogIn(){
        $request_data = array(
            'post_entry' => 'test edit using phpunit'
        );
        $request = $this->requestHTTP('PUT', '/v1/posts/edit/{id}', $request_data);
        $request = $request->withAttribute('id', 358);
        $response = $this->responseHTTP();
        $result = $this->sql_post->editPost($request, $response);
        $this->assertEquals(403, $result->getStatusCode());
    }

    /**
     * @backupGlobals disabled
     * @runInSeparateProcess
     * supposed to fail
     */
    public function EditPostIsNotSuccessful_Error(){
        $request_data = array(
            'post_entry' => 'test edit using phpunit'
        );
        $request = $this->requestHTTP('PUT', '/v1/posts/edit/{id}', $request_data);
        $request = $request->withAttribute('id', 358);
        $response = $this->responseHTTP();
        $result = $this->sql_post->editPost($request, $response);
        $this->assertEquals(400, $result->getStatusCode());
    }
}