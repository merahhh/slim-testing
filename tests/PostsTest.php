<?php
error_reporting(E_ALL^E_NOTICE);
use PHPUnit\Framework\TestCase;
use Slim\App;
use Slim\Http\Environment;
use Psr\Http\Message\ResponseInterface as Response;
use Psr\Http\Message\ServerRequestInterface as Request;
use Psr\Container\ContainerInterface as Container;
use utility\Session;

//require "v1/User.php
require_once "v1/SQLpost.php";

class PostsTest extends TestCase
{
    private $container;
    protected $sql, $session, $user, $app;

    public function setUp(): void
    {
        //parent::setUp(); // TODO: Change the autogenerated stub
        $this->app = new App(['settings' => ['displayErrorDetails' => true]]);
        $this->container = $this->app->getContainer();
        $this->sql = new SQLpost($this->container);//$this->sql = $this->container->get('SQLpost');
    }

    public function testCanBeCreatedFrom_GetConn() {
        $this->assertNotEmpty(
            user::class. ':getConn'
        );
    }

    protected function getRequest(string $method, string $path, array $data = [])
    {
        $method = strtoupper($method);

        $request = \Slim\Http\Request::createFromEnvironment(Environment::mock([
            'REQUEST_METHOD' => strtoupper($method),
            'REQUEST_URI' => $path,
            'QUERY_STRING' => ($method == "GET") ? http_build_query($data) : "",
        ]));

        $request = $request->withHeader('Content-Type', 'application/json');

        if ($method == "POST") {
            //$request->getBody()->write(json_encode($data));
            $request->withParsedBody($data);
        }

        return $request;
    }

    protected function sendHttpRequest(Request $request, App $app = null): Response {
        if (!$app) {
            $app = container()->get(App::class);
        }

        $response = $app->process($request, new \Slim\Http\Response());

        return $response;
    }

    /*public function testGetAllPosts(){
        $env = Environment::mock([
            'REQUEST_METHOD' => 'GET',
            'REQUEST_URI'    => '/',
        ]);
        $req = Request::createFromEnvironment($env);
        $this->app->getContainer()['request'] = $req;
        $response = $this->app->run(true);
        $this->assertSame($response->getStatusCode(), 200);
        $result = json_decode($response->getBody(), true);
        $this->assertSame($result["post_entry"], "Successfully logged in!");

    }*/

    /*public function testLoginSuccessful(){
        $env = Environment::mock([
            'REQUEST_METHOD' => 'POST',
            'REQUEST_URI'    => '/v1/users/login',
        ]);
        $request = \Slim\Http\Request::createFromEnvironment($env);
        $response = new \Slim\Http\Response();
        $login = $this->user->loginUser($request, $response);
        $this->assertSame((string)$login->getStatusCode(), 200);
    }*/

    public function testUserLoginIsSuccessful(){
        $requestData = ['email'=> 'm@yahoo.com', 'password'=>'123'];
        $env = Environment::mock([
            'REQUEST_METHOD' => 'POST',
            'REQUEST_URI'    => '/v1/users/login',
        ]);
        $request = \Slim\Http\Request::createFromEnvironment($env);
        $request->getBody()->write(json_encode($requestData));
        $response = new \Slim\Http\Response;
        $response = $this->sql->loginUser($request, $response);
        $this->assertSame(200, $response->getStatusCode());
        //$this->assertSame($this->controller->loginUser($request, $response)->getStatusCode, 200);
    }

    /*public function testLoginIsSuccessful(){
        $requestData = ['email'=> 'm@yahoo.com', 'password'=>'123'];
        $request  = $this->getRequest("post", "/v1/users/login", $requestData);
        $response = $this->sendHttpRequest($request, $this->app);
        $this->assertEquals(200, $response->getStatusCode());
    }*/

    public function WithParsedBody(){
        $requestData = ['email'=> 'ma@yahoo.com', 'password'=>'123'];
        $env = Environment::mock([
            'REQUEST_METHOD' => 'POST',
            'REQUEST_URI'    => '/v1/users/login'
        ]);
        $request = \Slim\Http\Request::createFromEnvironment($env);
        $response = new \Slim\Http\Response();
        $request->getBody()->write(json_encode($requestData));
        //$response->getBody()->write(json_encode($requestData));
        $result = json_decode($request->getBody());
        //$this->assertEquals($requestData, $result);
        //var_dump($result->email);
    }

    public function testUserLoginIsNotSuccessful_UserNotExist(){
        $requestData = ['email'=> 'ma@yahoo.com', 'password'=>'123'];
        $env = Environment::mock([
            'REQUEST_METHOD' => 'POST',
            'REQUEST_URI'    => '/v1/users/login'
        ]);
        $request = \Slim\Http\Request::createFromEnvironment($env);
        //$request->withParsedBody($requestData);
        $request->getBody()->write(json_encode($requestData));
        $response = $this->sendHttpRequest($request, $this->app);
        //var_dump($request->getBody());
        $response = $this->sql->loginUser($request, $response);
        $this->assertSame(400, $response->getStatusCode());
        //$this->expectException();
    }

    public function testLoginIsNotSuccessful_WrongPassword(){
        $requestData = ['email'=> 'm@yahoo.com', 'password'=>'1243'];
        $env = Environment::mock([
            'REQUEST_METHOD' => 'POST',
            'REQUEST_URI'    => '/v1/users/login',
            //'QUERY_STRING' => 'email=m@yahoo.com&password=1234'
        ]);
        $request = \Slim\Http\Request::createFromEnvironment($env);
        $request->getBody()->write(json_encode($requestData));
        $response = $this->sendHttpRequest($request, $this->app);
        $response = $this->sql->loginUser($request, $response);
        $this->assertSame(500, $response->getStatusCode());
    }

    public function testGetPostsIsSuccessful(){
        $env = Environment::mock([
            'REQUEST_METHOD' => 'GET',
            'REQUEST_URI'    => '/v1/posts'
        ]);
        $request = \Slim\Http\Request::createFromEnvironment($env);
        $response = new \Slim\Http\Response();
        $this->assertSame($response->getStatusCode(), 200);
    }

    public function GetPostsIsNotSuccessful_NoPost(){
        $env = Environment::mock([
            'REQUEST_METHOD' => 'POST',
            'REQUEST_URI'    => '/v1/users/login',
        ]);
        $request = \Slim\Http\Request::createFromEnvironment($env);
        $response = new \Slim\Http\Response();
        $this->assertSame($response->getStatusCode(), 400);
    }
}