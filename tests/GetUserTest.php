<?php

use PHPUnit\Framework\TestCase;
use Slim\Http\Environment;

require "v1/model/User.php";

class GetUserTest extends TestCase
{
    protected $user;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = new User();
    }

    public function testCanBeCreatedFrom_GetConn() {
        $this->assertNotEmpty(
            user::class. ':getConn'
        );
    }

    public function testFirstName(){
        $this->assertEquals($this->user->getUserFName(11), 'M');
    }

    public function testLastName(){
        $this->assertEquals($this->user->getUserLName(11), 'S');
    }

    public function testFullName(){
        $this->assertEquals($this->user->getUserFullName(11), 'M S');
    }

    public function testEmail(){
        $this->assertEquals($this->user->getUserEmail(11), 'm@yahoo.com');
    }

    public function testGetEmailVariables(){
        $email_var = $this->user->getEmailVariables(11);
        $this->assertArrayHasKey('full_name', $email_var);
        $this->assertArrayHasKey('email', $email_var);

        $this->assertEquals($email_var['full_name'], 'M S');
        $this->assertEquals($email_var['email'], 'm@yahoo.com');
    }

    public function testGetUserInfoByID(){
        $id = 11;
        $this->assertInstanceOf(stdClass::class, $this->user->getUserInfoByID($id));
    }

    public function testGetUserInfoByEmail(){
        $email = $this->user->getUserEmail(11);
        $this->assertInstanceOf(mysqli_result::class, $this->user->getUserInfoByEmail($email));
    }

    public function testGetInfoAssoc(){
        $email = $this->user->getUserEmail(11);
        $this->assertIsArray($this->user->getInfoAssoc($email));
    }
}